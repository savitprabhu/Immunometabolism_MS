main = "Based on 38 genes that contributed to all PCs",
cutree_rows = 4,
annotation_names_col  = F,
fontsize_row  = 7,
fontsize_col = 7,
cellwidth = 7,cellheight = 7)
#dev.off()
# Heatmap based on PC1+2+3 genes
dat <- read.csv("immgen_expr_values_20171228.csv")
toplot <- dat[which(dat$GeneSymbol %in% PCgenes),]
toplot.log <- log(toplot[,-1])
rownames(toplot.log)<- toplot$GeneSymbol
#pdf("Supplementary-4.pdf",width = 6.9,height = 8.5)
#par(mar=c(1,1,1,1))
pheatmap(toplot.log,
scale = "row",
cluster_cols = F, cluster_rows = T,
annotation_col = Col_annotation,
show_rownames = F,
gaps_col=c(8),
annotation_colors = anno_colors,
color = rev(brewer.pal(10,"RdYlBu")),
main = "Based on genes that contributed to at least one PC",
#cutree_rows = 7,
annotation_names_col  = F,
#cellwidth = 7,cellheight = 7,
fontsize_row  = 7,
fontsize_col = 7)
#dev.off()
# comparing PC 1_2_3 genes with all DE genes
setwd("~/Dropbox/THSTI/Jasneet-Aman paper/20180128/GEO2R_20180128/")
A1 <- read.csv("1.ProB_vs_DN_20180128.csv",stringsAsFactors = F)
A1 <- A1[which(A1$adj.P.Val<0.01),]
A1 <- A1[which(A1$Gene.symbol %in% genes$Genes),"Gene.symbol"]
#dev.off()
# Heatmap based on PC1+2+3 genes
dat <- read.csv("immgen_expr_values_20171228.csv")
toplot <- dat[which(dat$GeneSymbol %in% PCgenes),]
toplot.log <- log(toplot[,-1])
rownames(toplot.log)<- toplot$GeneSymbol
#pdf("Supplementary-4.pdf",width = 6.9,height = 8.5)
#par(mar=c(1,1,1,1))
pheatmap(toplot.log,
scale = "row",
cluster_cols = F, cluster_rows = T,
annotation_col = Col_annotation,
show_rownames = F,
gaps_col=c(8),
annotation_colors = anno_colors,
color = rev(brewer.pal(10,"RdYlBu")),
main = "Based on genes that contributed to at least one PC",
#cutree_rows = 7,
annotation_names_col  = F,
#cellwidth = 7,cellheight = 7,
fontsize_row  = 7,
fontsize_col = 7)
#dev.off()
# comparing PC 1_2_3 genes with all DE genes
setwd("~/Dropbox/THSTI/Jasneet-Aman paper/20180128/GEO2R_20180128/")
A1 <- read.csv("1.ProB_vs_DN_20180128.csv",stringsAsFactors = F)
A1 <- A1[which(A1$adj.P.Val<0.01),]
A1 <- A1[which(A1$Gene.symbol %in% genes$Genes),"Gene.symbol"]
A2 <- read.csv("2.PreB_vs_DP_20180128.csv",stringsAsFactors = F)
A2 <- A2[which(A2$adj.P.Val<0.01),]
A2 <- A2[which(A2$Gene.symbol %in% genes$Genes),"Gene.symbol"]
A3 <- read.csv("3.ImmatureB_vs_SP_20180128.csv",stringsAsFactors = F)
A3 <- A3[which(A3$adj.P.Val<0.01),]
A3 <- A3[which(A3$Gene.symbol %in% genes$Genes),"Gene.symbol"]
A4 <- read.csv("4.MatureB_vs_matureT_20180128.csv",stringsAsFactors = F)
A4 <- A4[which(A4$adj.P.Val<0.01),]
A4 <- A4[which(A4$Gene.symbol %in% genes$Genes),"Gene.symbol"]
A5 <- read.csv("5.ProB_vs_PreB_20180128.csv",stringsAsFactors = F)
A5 <- A5[which(A5$adj.P.Val<0.01),]
A5 <- A5[which(A5$Gene.symbol %in% genes$Genes),"Gene.symbol"]
A6 <- read.csv("6.PreB_vs_ImmatureB_20180128.csv",stringsAsFactors = F)
A6 <- A6[which(A6$adj.P.Val<0.01),]
A6 <- A6[which(A6$Gene.symbol %in% genes$Genes),"Gene.symbol"]
A7 <- read.csv("7.ImmatureB_vs_MatureB_20180128.csv",stringsAsFactors = F)
A7 <- A7[which(A7$adj.P.Val<0.01),]
A7 <- A7[which(A7$Gene.symbol %in% genes$Genes),"Gene.symbol"]
A8 <- read.csv("8.DN_vs_DP_20180128.csv",stringsAsFactors = F)
A8 <- A8[which(A8$adj.P.Val<0.01),]
A8 <- A8[which(A8$Gene.symbol %in% genes$Genes),"Gene.symbol"]
A9 <- read.csv("9.DP_vs_SP_20180128.csv",stringsAsFactors = F)
A9 <- A9[which(A9$adj.P.Val<0.01),]
A9 <- A9[which(A9$Gene.symbol %in% genes$Genes),"Gene.symbol"]
A10 <- read.csv("10.SP_vs_matureT_20180128.csv",stringsAsFactors = F)
A10 <- A10[which(A10$adj.P.Val<0.01),]
A10 <- A10[which(A10$Gene.symbol %in% genes$Genes),"Gene.symbol"]
A <- unique(c(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10))
PC <- unique(c(PC1_genes$genes,PC2_genes$genes,PC3_genes$genes))
genelists <- list(`PCA genes` = PC, `Differentially expressed genes` = A)
#pdf("Fig4F.pdf",width = 3.3,height = 3.3)
#par(mar=c(0,0,0,0))
venn(genelists)
#pdf("Fig4F.pdf",width = 3.3,height = 3.3)
#par(mar=c(0,0,0,0))
venn(genelists)
#pdf("Fig4F.pdf",width = 3.3,height = 3.3)
tiff("Fig4E.tiff",width = 3,height = 3, units = "in", res = 300,pointsize = 10)
par(mar=c(0,0,0,0))
venn(genelists)
legend(275,220,"P < 0.001",bty = "n")
dev.off()
#pdf("Fig4F.pdf",width = 3.3,height = 3.3)
tiff("Fig4F.tiff",width = 3,height = 3, units = "in", res = 300,pointsize = 10)
par(mar=c(0,0,0,0))
venn(genelists)
legend(275,220,"P < 0.001",bty = "n")
dev.off()
venn(genelists)
par(mar=c(0,0,0,0))
venn(genelists)
#pdf("Fig4F.pdf",width = 3.3,height = 3.3)
tiff("Fig4F.tiff",width = 3,height = 3, units = "in", res = 300,pointsize = 10)
par(mar=c(0,0,0,0))
venn(genelists)
legend(275,220,"P < 0.001",bty = "n")
dev.off()
1-phyper(576,1013,21755-1013,605)
# Generate a spreadsheet of all DE genes
setwd("~/Dropbox/THSTI/Jasneet-Aman paper/20180125/GEO2R_20180125/")
A1 <- read.csv("1.ProB_vs_DN_20180128.csv",stringsAsFactors = F)
A2 <- read.csv("2.PreB_vs_DP_20180128.csv",stringsAsFactors = F)
A3 <- read.csv("3.ImmatureB_vs_SP_20180128.csv",stringsAsFactors = F)
A4 <- read.csv("4.MatureB_vs_matureT_20180128.csv",stringsAsFactors = F)
A5 <- read.csv("5.ProB_vs_PreB_20180128.csv",stringsAsFactors = F)
# Generate a spreadsheet of all DE genes
setwd("~/Dropbox/THSTI/Jasneet-Aman paper/20180125/GEO2R_20180125/")
A1 <- read.csv("1.ProB_vs_DN_20180128.csv",stringsAsFactors = F)
## comparison of DE genes across all lineages ##
setwd("~/Dropbox/THSTI/Jasneet-Aman paper/20180128/GEO2R_20180128/")
rm(list = ls())
## D1
dat <- read.csv("1.ProB_vs_DN_20180128.csv")
ngenes_universe <- length(unique(dat$Gene.symbol))
genelist <- read.csv("../Genelist_20180125.csv",stringsAsFactors = F)
length(setdiff(unique(genelist$Genes),unique(dat$Gene.symbol))) # number of genes in gene list that are not in microarray
genelist <- filter(genelist, !Genes %in% setdiff(unique(genelist$Genes),unique(dat$Gene.symbol))) # these genes need to be removed from gene list
genelist <- genelist[,c(1,2)] # we need only the curated pathway
genelist <- genelist[!duplicated(genelist),]
DE_genes <- dat[order(dat$adj.P.Val),][1:4000,]
ngenes_DEgenes <- length(unique(DE_genes$Gene.symbol))
DE_genes <- DE_genes[which(DE_genes$Gene.symbol %in% genelist$Genes),]
DE_genes <- merge(DE_genes,genelist,by.x = "Gene.symbol",by.y = "Genes")
DE_genes <- DE_genes[,c(1,9)]
DE_genes<-DE_genes[!duplicated(DE_genes),]
Temp1 <- data.frame(genelist %>% count(Curated_pathway))
Temp2 <- data.frame(DE_genes %>% count(Curated_pathway))
Temp1<- merge(Temp1, Temp2,by="Curated_pathway",all.x = T)
D1 <- Temp1[,c(1,3,2)]
colnames(D1) <- c("Pathway","Overlap","ngenes_genelist")
D1$ngenes_not_genelist <- ngenes_universe - D1$ngenes_genelist
D1$ngenes_DEgenes <- rep(ngenes_DEgenes)
D1$HG_test <- 1-phyper(D1$Overlap-1,D1$ngenes_genelist,D1$ngenes_not_genelist,D1$ngenes_DEgenes)
D1$FDR <- p.adjust(D1$HG_test, method = "fdr", n = nrow(D1))
D1$Enrichment <- (D1$Overlap/D1$ngenes_DEgenes)/(D1$ngenes_genelist/(D1$ngenes_genelist+D1$ngenes_not_genelist))
## D2
dat <- read.csv("2.PreB_vs_DP_20180128.csv")
ngenes_universe <- length(unique(dat$Gene.symbol))
genelist <- read.csv("../Genelist_20180125.csv",stringsAsFactors = F)
length(setdiff(unique(genelist$Genes),unique(dat$Gene.symbol))) # number of genes in gene list that are not in microarray
genelist <- filter(genelist, !Genes %in% setdiff(unique(genelist$Genes),unique(dat$Gene.symbol))) # these genes need to be removed from gene list
genelist <- genelist[,c(1,2)] # we need only the curated pathway
genelist <- genelist[!duplicated(genelist),]
DE_genes <- dat[order(dat$adj.P.Val),][1:4000,]
ngenes_DEgenes <- length(unique(DE_genes$Gene.symbol))
DE_genes <- DE_genes[which(DE_genes$Gene.symbol %in% genelist$Genes),]
DE_genes <- merge(DE_genes,genelist,by.x = "Gene.symbol",by.y = "Genes")
DE_genes <- DE_genes[,c(1,9)]
DE_genes<-DE_genes[!duplicated(DE_genes),]
Temp1 <- data.frame(genelist %>% count(Curated_pathway))
Temp2 <- data.frame(DE_genes %>% count(Curated_pathway))
Temp1<- merge(Temp1, Temp2,by="Curated_pathway",all.x = T)
D2 <- Temp1[,c(1,3,2)]
colnames(D2) <- c("Pathway","Overlap","ngenes_genelist")
D2$ngenes_not_genelist <- ngenes_universe - D2$ngenes_genelist
D2$ngenes_DEgenes <- rep(ngenes_DEgenes)
D2$HG_test <- 1-phyper(D2$Overlap-1,D2$ngenes_genelist,D2$ngenes_not_genelist,D2$ngenes_DEgenes)
D2$FDR <- p.adjust(D2$HG_test, method = "fdr", n = nrow(D2))
D2$Enrichment <- (D2$Overlap/D2$ngenes_DEgenes)/(D2$ngenes_genelist/(D2$ngenes_genelist+D2$ngenes_not_genelist))
## D3
dat <- read.csv("3.ImmatureB_vs_SP_20180128.csv")
ngenes_universe <- length(unique(dat$Gene.symbol))
genelist <- read.csv("../Genelist_20180125.csv",stringsAsFactors = F)
length(setdiff(unique(genelist$Genes),unique(dat$Gene.symbol))) # number of genes in gene list that are not in microarray
genelist <- filter(genelist, !Genes %in% setdiff(unique(genelist$Genes),unique(dat$Gene.symbol))) # these genes need to be removed from gene list
genelist <- genelist[,c(1,2)] # we need only the curated pathway
genelist <- genelist[!duplicated(genelist),]
DE_genes <- dat[order(dat$adj.P.Val),][1:4000,]
ngenes_DEgenes <- length(unique(DE_genes$Gene.symbol))
DE_genes <- DE_genes[which(DE_genes$Gene.symbol %in% genelist$Genes),]
DE_genes <- merge(DE_genes,genelist,by.x = "Gene.symbol",by.y = "Genes")
DE_genes <- DE_genes[,c(1,9)]
DE_genes<-DE_genes[!duplicated(DE_genes),]
Temp1 <- data.frame(genelist %>% count(Curated_pathway))
Temp2 <- data.frame(DE_genes %>% count(Curated_pathway))
Temp1<- merge(Temp1, Temp2,by="Curated_pathway",all.x = T)
D3 <- Temp1[,c(1,3,2)]
colnames(D3) <- c("Pathway","Overlap","ngenes_genelist")
D3$ngenes_not_genelist <- ngenes_universe - D3$ngenes_genelist
D3$ngenes_DEgenes <- rep(ngenes_DEgenes)
D3$HG_test <- 1-phyper(D3$Overlap-1,D3$ngenes_genelist,D3$ngenes_not_genelist,D3$ngenes_DEgenes)
D3$FDR <- p.adjust(D3$HG_test, method = "fdr", n = nrow(D3))
D3$Enrichment <- (D3$Overlap/D3$ngenes_DEgenes)/(D3$ngenes_genelist/(D3$ngenes_genelist+D3$ngenes_not_genelist))
## D4
dat <- read.csv("4.MatureB_vs_matureT_20180128.csv")
ngenes_universe <- length(unique(dat$Gene.symbol))
genelist <- read.csv("../Genelist_20180125.csv",stringsAsFactors = F)
length(setdiff(unique(genelist$Genes),unique(dat$Gene.symbol))) # number of genes in gene list that are not in microarray
genelist <- filter(genelist, !Genes %in% setdiff(unique(genelist$Genes),unique(dat$Gene.symbol))) # these genes need to be removed from gene list
genelist <- genelist[,c(1,2)] # we need only the curated pathway
genelist <- genelist[!duplicated(genelist),]
DE_genes <- dat[order(dat$adj.P.Val),][1:4000,]
ngenes_DEgenes <- length(unique(DE_genes$Gene.symbol))
DE_genes <- DE_genes[which(DE_genes$Gene.symbol %in% genelist$Genes),]
DE_genes <- merge(DE_genes,genelist,by.x = "Gene.symbol",by.y = "Genes")
DE_genes <- DE_genes[,c(1,9)]
DE_genes<-DE_genes[!duplicated(DE_genes),]
Temp1 <- data.frame(genelist %>% count(Curated_pathway))
Temp2 <- data.frame(DE_genes %>% count(Curated_pathway))
Temp1<- merge(Temp1, Temp2,by="Curated_pathway",all.x = T)
D4 <- Temp1[,c(1,3,2)]
colnames(D4) <- c("Pathway","Overlap","ngenes_genelist")
D4$ngenes_not_genelist <- ngenes_universe - D4$ngenes_genelist
D4$ngenes_DEgenes <- rep(ngenes_DEgenes)
D4$HG_test <- 1-phyper(D4$Overlap-1,D4$ngenes_genelist,D4$ngenes_not_genelist,D4$ngenes_DEgenes)
D4$FDR <- p.adjust(D4$HG_test, method = "fdr", n = nrow(D4))
D4$Enrichment <- (D4$Overlap/D4$ngenes_DEgenes)/(D4$ngenes_genelist/(D4$ngenes_genelist+D4$ngenes_not_genelist))
## B1
dat <- read.csv("5.ProB_vs_PreB_20180128.csv")
ngenes_universe <- length(unique(dat$Gene.symbol))
genelist <- read.csv("../Genelist_20180125.csv",stringsAsFactors = F)
length(setdiff(unique(genelist$Genes),unique(dat$Gene.symbol))) # number of genes in gene list that are not in microarray
genelist <- filter(genelist, !Genes %in% setdiff(unique(genelist$Genes),unique(dat$Gene.symbol))) # these genes need to be removed from gene list
genelist <- genelist[,c(1,2)] # we need only the curated pathway
genelist <- genelist[!duplicated(genelist),]
DE_genes <- dat[order(dat$adj.P.Val),][1:4000,]
ngenes_DEgenes <- length(unique(DE_genes$Gene.symbol))
DE_genes <- DE_genes[which(DE_genes$Gene.symbol %in% genelist$Genes),]
DE_genes <- merge(DE_genes,genelist,by.x = "Gene.symbol",by.y = "Genes")
DE_genes <- DE_genes[,c(1,9)]
DE_genes<-DE_genes[!duplicated(DE_genes),]
Temp1 <- data.frame(genelist %>% count(Curated_pathway))
Temp2 <- data.frame(DE_genes %>% count(Curated_pathway))
Temp1<- merge(Temp1, Temp2,by="Curated_pathway",all.x = T)
B1 <- Temp1[,c(1,3,2)]
colnames(B1) <- c("Pathway","Overlap","ngenes_genelist")
B1$ngenes_not_genelist <- ngenes_universe - B1$ngenes_genelist
B1$ngenes_DEgenes <- rep(ngenes_DEgenes)
B1$HG_test <- 1-phyper(B1$Overlap-1,B1$ngenes_genelist,B1$ngenes_not_genelist,B1$ngenes_DEgenes)
B1$FDR <- p.adjust(B1$HG_test, method = "fdr", n = nrow(B1))
B1$Enrichment <- (B1$Overlap/B1$ngenes_DEgenes)/(B1$ngenes_genelist/(B1$ngenes_genelist+B1$ngenes_not_genelist))
## B2
dat <- read.csv("6.PreB_vs_ImmatureB_20180128.csv")
ngenes_universe <- length(unique(dat$Gene.symbol))
genelist <- read.csv("../Genelist_20180125.csv",stringsAsFactors = F)
length(setdiff(unique(genelist$Genes),unique(dat$Gene.symbol))) # number of genes in gene list that are not in microarray
genelist <- filter(genelist, !Genes %in% setdiff(unique(genelist$Genes),unique(dat$Gene.symbol))) # these genes need to be removed from gene list
genelist <- genelist[,c(1,2)] # we need only the curated pathway
genelist <- genelist[!duplicated(genelist),]
DE_genes <- dat[order(dat$adj.P.Val),][1:4000,]
ngenes_DEgenes <- length(unique(DE_genes$Gene.symbol))
DE_genes <- DE_genes[which(DE_genes$Gene.symbol %in% genelist$Genes),]
DE_genes <- merge(DE_genes,genelist,by.x = "Gene.symbol",by.y = "Genes")
DE_genes <- DE_genes[,c(1,9)]
DE_genes<-DE_genes[!duplicated(DE_genes),]
Temp1 <- data.frame(genelist %>% count(Curated_pathway))
Temp2 <- data.frame(DE_genes %>% count(Curated_pathway))
Temp1<- merge(Temp1, Temp2,by="Curated_pathway",all.x = T)
B2 <- Temp1[,c(1,3,2)]
colnames(B2) <- c("Pathway","Overlap","ngenes_genelist")
B2$ngenes_not_genelist <- ngenes_universe - B2$ngenes_genelist
B2$ngenes_DEgenes <- rep(ngenes_DEgenes)
B2$HG_test <- 1-phyper(B2$Overlap-1,B2$ngenes_genelist,B2$ngenes_not_genelist,B2$ngenes_DEgenes)
B2$FDR <- p.adjust(B2$HG_test, method = "fdr", n = nrow(B2))
B2$Enrichment <- (B2$Overlap/B2$ngenes_DEgenes)/(B2$ngenes_genelist/(B2$ngenes_genelist+B2$ngenes_not_genelist))
## B3
dat <- read.csv("7.ImmatureB_vs_MatureB_20180128.csv")
ngenes_universe <- length(unique(dat$Gene.symbol))
genelist <- read.csv("../Genelist_20180125.csv",stringsAsFactors = F)
length(setdiff(unique(genelist$Genes),unique(dat$Gene.symbol))) # number of genes in gene list that are not in microarray
genelist <- filter(genelist, !Genes %in% setdiff(unique(genelist$Genes),unique(dat$Gene.symbol))) # these genes need to be removed from gene list
genelist <- genelist[,c(1,2)] # we need only the curated pathway
genelist <- genelist[!duplicated(genelist),]
DE_genes <- dat[order(dat$adj.P.Val),][1:4000,]
ngenes_DEgenes <- length(unique(DE_genes$Gene.symbol))
DE_genes <- DE_genes[which(DE_genes$Gene.symbol %in% genelist$Genes),]
DE_genes <- merge(DE_genes,genelist,by.x = "Gene.symbol",by.y = "Genes")
DE_genes <- DE_genes[,c(1,9)]
DE_genes<-DE_genes[!duplicated(DE_genes),]
Temp1 <- data.frame(genelist %>% count(Curated_pathway))
Temp2 <- data.frame(DE_genes %>% count(Curated_pathway))
Temp1<- merge(Temp1, Temp2,by="Curated_pathway",all.x = T)
B3 <- Temp1[,c(1,3,2)]
colnames(B3) <- c("Pathway","Overlap","ngenes_genelist")
B3$ngenes_not_genelist <- ngenes_universe - B3$ngenes_genelist
B3$ngenes_DEgenes <- rep(ngenes_DEgenes)
B3$HG_test <- 1-phyper(B3$Overlap-1,B3$ngenes_genelist,B3$ngenes_not_genelist,B3$ngenes_DEgenes)
B3$FDR <- p.adjust(B3$HG_test, method = "fdr", n = nrow(B3))
B3$Enrichment <- (B3$Overlap/B3$ngenes_DEgenes)/(B3$ngenes_genelist/(B3$ngenes_genelist+B3$ngenes_not_genelist))
## T1
dat <- read.csv("8.DN_vs_DP_20180128.csv")
ngenes_universe <- length(unique(dat$Gene.symbol))
genelist <- read.csv("../Genelist_20180125.csv",stringsAsFactors = F)
length(setdiff(unique(genelist$Genes),unique(dat$Gene.symbol))) # number of genes in gene list that are not in microarray
genelist <- filter(genelist, !Genes %in% setdiff(unique(genelist$Genes),unique(dat$Gene.symbol))) # these genes need to be removed from gene list
genelist <- genelist[,c(1,2)] # we need only the curated pathway
genelist <- genelist[!duplicated(genelist),]
DE_genes <- dat[order(dat$adj.P.Val),][1:4000,]
ngenes_DEgenes <- length(unique(DE_genes$Gene.symbol))
DE_genes <- DE_genes[which(DE_genes$Gene.symbol %in% genelist$Genes),]
DE_genes <- merge(DE_genes,genelist,by.x = "Gene.symbol",by.y = "Genes")
DE_genes <- DE_genes[,c(1,9)]
DE_genes<-DE_genes[!duplicated(DE_genes),]
Temp1 <- data.frame(genelist %>% count(Curated_pathway))
Temp2 <- data.frame(DE_genes %>% count(Curated_pathway))
Temp1<- merge(Temp1, Temp2,by="Curated_pathway",all.x = T)
T1 <- Temp1[,c(1,3,2)]
colnames(T1) <- c("Pathway","Overlap","ngenes_genelist")
T1$ngenes_not_genelist <- ngenes_universe - T1$ngenes_genelist
T1$ngenes_DEgenes <- rep(ngenes_DEgenes)
T1$HG_test <- 1-phyper(T1$Overlap-1,T1$ngenes_genelist,T1$ngenes_not_genelist,T1$ngenes_DEgenes)
T1$FDR <- p.adjust(T1$HG_test, method = "fdr", n = nrow(T1))
T1$Enrichment <- (T1$Overlap/T1$ngenes_DEgenes)/(T1$ngenes_genelist/(T1$ngenes_genelist+T1$ngenes_not_genelist))
## T2
dat <- read.csv("9.DP_vs_SP_20180128.csv")
ngenes_universe <- length(unique(dat$Gene.symbol))
genelist <- read.csv("../Genelist_20180125.csv",stringsAsFactors = F)
length(setdiff(unique(genelist$Genes),unique(dat$Gene.symbol))) # number of genes in gene list that are not in microarray
genelist <- filter(genelist, !Genes %in% setdiff(unique(genelist$Genes),unique(dat$Gene.symbol))) # these genes need to be removed from gene list
genelist <- genelist[,c(1,2)] # we need only the curated pathway
genelist <- genelist[!duplicated(genelist),]
DE_genes <- dat[order(dat$adj.P.Val),][1:4000,]
ngenes_DEgenes <- length(unique(DE_genes$Gene.symbol))
DE_genes <- DE_genes[which(DE_genes$Gene.symbol %in% genelist$Genes),]
DE_genes <- merge(DE_genes,genelist,by.x = "Gene.symbol",by.y = "Genes")
DE_genes <- DE_genes[,c(1,9)]
DE_genes<-DE_genes[!duplicated(DE_genes),]
Temp1 <- data.frame(genelist %>% count(Curated_pathway))
Temp2 <- data.frame(DE_genes %>% count(Curated_pathway))
Temp1<- merge(Temp1, Temp2,by="Curated_pathway",all.x = T)
T2 <- Temp1[,c(1,3,2)]
colnames(T2) <- c("Pathway","Overlap","ngenes_genelist")
T2$ngenes_not_genelist <- ngenes_universe - T2$ngenes_genelist
T2$ngenes_DEgenes <- rep(ngenes_DEgenes)
T2$HG_test <- 1-phyper(T2$Overlap-1,T2$ngenes_genelist,T2$ngenes_not_genelist,T2$ngenes_DEgenes)
T2$FDR <- p.adjust(T2$HG_test, method = "fdr", n = nrow(T2))
T2$Enrichment <- (T2$Overlap/T2$ngenes_DEgenes)/(T2$ngenes_genelist/(T2$ngenes_genelist+T2$ngenes_not_genelist))
## T3
dat <- read.csv("10.SP_vs_matureT_20180128.csv")
ngenes_universe <- length(unique(dat$Gene.symbol))
genelist <- read.csv("../Genelist_20180125.csv",stringsAsFactors = F)
length(setdiff(unique(genelist$Genes),unique(dat$Gene.symbol))) # number of genes in gene list that are not in microarray
genelist <- filter(genelist, !Genes %in% setdiff(unique(genelist$Genes),unique(dat$Gene.symbol))) # these genes need to be removed from gene list
genelist <- genelist[,c(1,2)] # we need only the curated pathway
genelist <- genelist[!duplicated(genelist),]
DE_genes <- dat[order(dat$adj.P.Val),][1:4000,]
ngenes_DEgenes <- length(unique(DE_genes$Gene.symbol))
DE_genes <- DE_genes[which(DE_genes$Gene.symbol %in% genelist$Genes),]
DE_genes <- merge(DE_genes,genelist,by.x = "Gene.symbol",by.y = "Genes")
DE_genes <- DE_genes[,c(1,9)]
DE_genes<-DE_genes[!duplicated(DE_genes),]
Temp1 <- data.frame(genelist %>% count(Curated_pathway))
Temp2 <- data.frame(DE_genes %>% count(Curated_pathway))
Temp1<- merge(Temp1, Temp2,by="Curated_pathway",all.x = T)
T3 <- Temp1[,c(1,3,2)]
colnames(T3) <- c("Pathway","Overlap","ngenes_genelist")
T3$ngenes_not_genelist <- ngenes_universe - T3$ngenes_genelist
T3$ngenes_DEgenes <- rep(ngenes_DEgenes)
T3$HG_test <- 1-phyper(T3$Overlap-1,T3$ngenes_genelist,T3$ngenes_not_genelist,T3$ngenes_DEgenes)
T3$FDR <- p.adjust(T3$HG_test, method = "fdr", n = nrow(T3))
T3$Enrichment <- (T3$Overlap/T3$ngenes_DEgenes)/(T3$ngenes_genelist/(T3$ngenes_genelist+T3$ngenes_not_genelist))
##
T1[which(T1$FDR>0.1),8] <- rep(NA)
T2[which(T2$FDR>0.1),8] <- rep(NA)
T3[which(T3$FDR>0.1),8] <- rep(NA)
B1[which(B1$FDR>0.1),8] <- rep(NA)
B2[which(B2$FDR>0.1),8] <- rep(NA)
B3[which(B3$FDR>0.1),8] <- rep(NA)
D1[which(D1$FDR>0.1),8] <- rep(NA)
D2[which(D2$FDR>0.1),8] <- rep(NA)
D3[which(D3$FDR>0.1),8] <- rep(NA)
D4[which(D4$FDR>0.1),8] <- rep(NA)
T1[which(T1$Enrichment<=1),8] <- rep(NA)
T2[which(T2$Enrichment<=1),8] <- rep(NA)
T3[which(T3$Enrichment<=1),8] <- rep(NA)
B1[which(B1$Enrichment<=1),8] <- rep(NA)
B2[which(B2$Enrichment<=1),8] <- rep(NA)
B3[which(B3$Enrichment<=1),8] <- rep(NA)
D1[which(D1$Enrichment<=1),8] <- rep(NA)
D2[which(D2$Enrichment<=1),8] <- rep(NA)
D3[which(D3$Enrichment<=1),8] <- rep(NA)
D4[which(D4$Enrichment<=1),8] <- rep(NA)
##
lineage <- data.frame(D1$Pathway,D1$Enrichment, D2$Enrichment, D3$Enrichment, D4$Enrichment)
colnames(lineage) <- c("Pathway","Pro-B vs DN-T",
"Pre-B vs DP-T", "Immature-B vs SP-T",
"Mature-B vs Mature-T")
lineage
rownames(lineage) <- lineage$Pathway
#pdf("Fig4G.pdf",width = 5.5,height = 5)
pheatmap((lineage[,-1]),
cluster_cols = F, cluster_rows = F,
show_rownames = T,
color = brewer.pal(9,"Reds"),
main = "Between-lineage",
fontsize_col = 10,
fontsize_row = 10,
cellwidth = 20,cellheight = 20)
#pdf("Fig4G.pdf",width = 5.5,height = 5)
tiff("Fig4F.tiff",width = 4.5,height = 3, units = "in", res = 300,pointsize = 10)
pheatmap((lineage[,-1]),
cluster_cols = F, cluster_rows = F,
show_rownames = T,
color = brewer.pal(9,"Reds"),
main = "Between-lineage",
fontsize_col = 10,
fontsize_row = 10,
cellwidth = 20,cellheight = 20)
dev.off()
#pdf("Fig4G.pdf",width = 5.5,height = 5)
tiff("Fig4F.tiff",width = 4.5,height = 4, units = "in", res = 300,pointsize = 10)
pheatmap((lineage[,-1]),
cluster_cols = F, cluster_rows = F,
show_rownames = T,
color = brewer.pal(9,"Reds"),
main = "Between-lineage",
fontsize_col = 10,
fontsize_row = 10,
cellwidth = 20,cellheight = 20)
dev.off()
#dev.off()
Developm <- data.frame(B2$Pathway,B1$Enrichment,B2$Enrichment, B3$Enrichment,
T1$Enrichment,T2$Enrichment,T3$Enrichment)
colnames(Developm) <- c("Pathway","Pro-B vs Pre-B",
"Pre-B vs Immature-B",
"Immature-B vs Mature-B",
"DN-T vs DP-T",
"DP-T vs SP-T",
"SP-T vs Mature-T")
Developm
rownames(Developm) <- Developm$Pathway
#pdf("Fig4H.pdf",width = 5.5,height = 5)
pheatmap(Developm[,-1],
cluster_cols = F, cluster_rows = F,
show_rownames = T,
color = brewer.pal(9,"Reds"),
main = "Across developmental stages",
fontsize_col = 10,
fontsize_row = 10,
gaps_col = c(3),
cellwidth = 20,cellheight = 20)
#pdf("Fig4H.pdf",width = 5.5,height = 5)
tiff("Fig4G.tiff",width = 4.5,height = 4, units = "in", res = 300,pointsize = 10)
pheatmap(Developm[,-1],
cluster_cols = F, cluster_rows = F,
show_rownames = T,
color = brewer.pal(9,"Reds"),
main = "Across developmental stages",
fontsize_col = 10,
fontsize_row = 10,
gaps_col = c(3),
cellwidth = 20,cellheight = 20)
dev.off()
#pdf("Fig4H.pdf",width = 5.5,height = 5)
tiff("Fig4G.tiff",width = 5,height = 4, units = "in", res = 300,pointsize = 10)
pheatmap(Developm[,-1],
cluster_cols = F, cluster_rows = F,
show_rownames = T,
color = brewer.pal(9,"Reds"),
main = "Across developmental stages",
fontsize_col = 10,
fontsize_row = 10,
gaps_col = c(3),
cellwidth = 20,cellheight = 20)
dev.off()
#pdf("Fig4H.pdf",width = 5.5,height = 5)
tiff("Fig4G.tiff",width = 5.5,height = 4, units = "in", res = 300,pointsize = 10)
pheatmap(Developm[,-1],
cluster_cols = F, cluster_rows = F,
show_rownames = T,
color = brewer.pal(9,"Reds"),
main = "Across developmental stages",
fontsize_col = 10,
fontsize_row = 10,
gaps_col = c(3),
cellwidth = 20,cellheight = 20)
dev.off()
#pdf("Fig4H.pdf",width = 5.5,height = 5)
tiff("Fig4G.tiff",width = 5.5,height = 4.2, units = "in", res = 300,pointsize = 10)
pheatmap(Developm[,-1],
cluster_cols = F, cluster_rows = F,
show_rownames = T,
color = brewer.pal(9,"Reds"),
main = "Across developmental stages",
fontsize_col = 10,
fontsize_row = 10,
gaps_col = c(3),
cellwidth = 20,cellheight = 20)
dev.off()
#pdf("Fig4G.pdf",width = 5.5,height = 5)
tiff("Fig4F.tiff",width = 4.5,height = 4.2, units = "in", res = 300,pointsize = 10)
pheatmap((lineage[,-1]),
cluster_cols = F, cluster_rows = F,
show_rownames = T,
color = brewer.pal(9,"Reds"),
main = "Between-lineage",
fontsize_col = 10,
fontsize_row = 10,
cellwidth = 20,cellheight = 20)
dev.off()
